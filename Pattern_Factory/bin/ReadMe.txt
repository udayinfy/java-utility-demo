1.
工厂方法模式仿佛已经很完美的对对象的创建进行了包装，使得客户程序中仅仅处理抽象
 产品角色提供的接口。那我们是否一定要在代码中遍布工厂呢？大可不必。也许在下面情
 况下你可以考虑使用工厂方法模式：

1)当客户程序不需要知道要使用对象的创建过程。

2)客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。

简单工厂模式与工厂方法模式真正的避免了代码的改动了？没有。在简单工厂模式中，新产
品的加入要修改工厂角色中的判断语句；而在工厂方法模式中，要么将判断逻辑留在抽象工
厂角色中，要么在客户程序中将具体工厂角色写死（就象上面的例子一样）。而且产品对象
创建条件的改变必然会引起工厂角色的修改。面对这种情况，Java的反射机制与配置文件的
巧妙结合突破了限制――这在Spring中完美的体现了出来。

2.
而且使用抽象工厂模式还要满足一下条件：

1)系统中有多个产品族，而系统一次只可能消费其中一族产品。

2)同属于同一个产品族的产品以其使用。

3.
抽象工厂模式没有代码未完