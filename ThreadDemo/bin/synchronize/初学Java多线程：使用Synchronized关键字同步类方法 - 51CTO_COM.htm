<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0048)http://developer.51cto.com/art/200906/132354.htm -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>初学Java多线程：使用Synchronized关键字同步类方法 - 51CTO.COM</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META content=ie=7 http-equiv=x-ua-compatible>
<META name=description 
content=本文介绍使用Synchronized关键字同步类方法。要达成Java多线程的run方法同步，需要在void和public之间加上synchronized关键字。>
<META name=keywords content=Java多线程,Synchronized关键字,同步类><LINK rel=stylesheet 
type=text/css 
href="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/news_09.css"><LINK 
rel=stylesheet type=text/css 
href="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/master_top.css">
<SCRIPT language=javaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/validate2.js"></SCRIPT>

<SCRIPT language=javaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/fb_words_list.htm"></SCRIPT>

<SCRIPT language=javaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/base6.js"></SCRIPT>

<SCRIPT language=javaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/dialog_utf8.js"></SCRIPT>

<SCRIPT language=javaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/mail.js"></SCRIPT>

<SCRIPT language=javascript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/article.js"></SCRIPT>

<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/index_1_down.js"></SCRIPT>

<SCRIPT>
var thistid=132354;
</SCRIPT>

<META name=GENERATOR content="MSHTML 8.00.6001.18999"></HEAD>
<BODY onresize=set_sreach() onload=set_sreach()>
<DIV class=top>
<DIV class=top_nav>
<DIV class=top_nav_logo title="51CTO.COM - 技术成就梦想 -  中国领先的IT技术网站"></DIV>
<DIV class=top_nav_r><A href="http://www.51cto.com/">51CTO首页</A> | <A 
href="http://news.51cto.com/">新闻</A> | <A 
href="http://www.51cto.com/col/35">专题</A> | <A 
href="http://bbs.51cto.com/">论坛</A> | <A href="http://blog.51cto.com/">博客</A> | 
<A href="http://down.51cto.com/">下载</A> | <A href="http://g.51cto.com/">技术圈</A> 
| <A href="http://book.51cto.com/">读书</A> | <A class=top_nav_r1 
onmouseover=show(1,this) onmouseout=popupClose() 
href="http://www.51cto.com/col/35/">技术频道 </A>| <A 
href="http://www.cioage.com/">CIO </A>| <A href="http://www.watchstor.com/">存储 
</A>| <A href="http://www.hc3i.cn/">HC3i </A>| <A 
href="http://www.51cto.com/about/map.htm">地图</A> </DIV></DIV></DIV>
<DIV id=s1 class=subMenu1 onmouseover=popupNoClose() onmouseout=popupClose()>
<UL>
  <LI><A href="http://network.51cto.com/">组网</A> 
  <LI><A href="http://netsecurity.51cto.com/">安全</A> 
  <LI><A href="http://developer.51cto.com/">开发</A> 
  <LI><A href="http://database.51cto.com/">数据库</A> 
  <LI><A href="http://server.51cto.com/">服务器</A> 
  <LI><A href="http://os.51cto.com/">系统</A> 
  <LI><A href="http://virtual.51cto.com/">虚拟化</A> 
  <LI><A href="http://cloud.51cto.com/">云计算</A> 
  <LI><A href="http://developer.51cto.com/embed/">嵌入式</A> </LI></UL></DIV>
<DIV id=s1 class=subMenu1 onmouseover=popupNoClose() onmouseout=popupClose()>
<UL>
  <LI><A href="http://network.51cto.com/">组网建网</A> 
  <LI><A href="http://netsecurity.51cto.com/">网络安全</A> 
  <LI><A href="http://server.51cto.com/">服务器</A> 
  <LI><A href="http://os.51cto.com/">操作系统</A> 
  <LI><A href="http://virtual.51cto.com/">虚拟化</A> 
  <LI><A href="http://developer.51cto.com/">开发</A></LI></UL></DIV>
<DIV id=s2 class=subMenu2 onmouseover=popupNoClose( onmouseout=popupClose() )>
<UL>
  <LI><A href="http://www.cioage.com/news">资讯前沿</A> 
  <LI><A href="http://www.cioage.com/insight">业界观察</A> 
  <LI><A href="http://www.cioage.com/exp">应用体验</A> 
  <LI><A href="http://www.cioage.com/tech">杀手技术</A></LI></UL></DIV>
<DIV id=s3 class=subMenu3 onmouseover=popupNoClose() onmouseout=popupClose()>
<UL>
  <LI><A href="http://news.watchstor.com/">新闻资讯</A> 
  <LI><A href="http://tech.watchstor.com/">技术中心</A> 
  <LI><A href="http://video.watchstor.com/">互动视频</A> 
  <LI><A href="http://special.watchstor.com/">专题汇聚</A></LI></UL></DIV>
<DIV class=BR_8></DIV>
<DIV class=banner>
<DIV id=tonglanad class=banner_l></DIV>
<DIV class=banner_r>
<UL>
  <LI id=wordlinkad1>
  <LI id=wordlinkad2>
  <LI id=wordlinkad3>
  <LI id=wordlinkad4></LI></UL></DIV></DIV>
<DIV class=BR_8></DIV>
<DIV id=subNav>
<DIV class=subNav_logo><IMG 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/kaifa_logo.gif"></DIV>
<DIV class=subNav_l><A href="http://developer.51cto.com/">首页</A> | <A 
href="http://developer.51cto.com/java/">Java</A> | <A 
href="http://developer.51cto.com/net/">.NET</A> | <A 
href="http://developer.51cto.com/web/">Web</A> | <A 
href="http://developer.51cto.com/col/1315/">XML</A> | <A 
href="http://developer.51cto.com/col/585/">语言工具</A> | <A 
href="http://developer.51cto.com/col/1312/">测试</A> | <A 
href="http://developer.51cto.com/col/1314/" target=_blank>游戏</A> | <A 
href="http://developer.51cto.com/col/583/" target=_blank>移动</A> | <A 
href="http://developer.51cto.com/col/1308/">架构</A> | <A 
href="http://developer.51cto.com/col/586/">项目管理</A> | <A 
href="http://publish.51cto.com/list/460/">全部文章</A></DIV>
<DIV class=search>
<FORM 
style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px" 
method=post name=searchform action=http://www.51cto.com/php/search.php>
<DL>
  <DT><INPUT class=new_te1 name=keyword> </DT>
  <DD><INPUT 
  src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/search.gif" 
  type=image></DD></DL></FORM></DIV></DIV>
<DIV class=BR_10></DIV>
<DIV id=container>
<DIV id=left>
<DIV class=title>
<DIV class=breadcrumb>您所在的位置：<A href="http://www.51cto.com/" 
target=_blank>首页</A> &gt; <A href="http://developer.51cto.com/">开发</A> &gt; <A 
href="http://developer.51cto.com/col/461/">Java</A> &gt; <A 
href="http://developer.51cto.com/col/1005/">Java基础</A> &gt; </DIV>
<DIV class=con>
<UL>
  <LI>
  <H1>初学Java多线程：使用Synchronized关键字同步类方法</H1>
  <LI class=msg><SPAN><A 
  href="http://developer.51cto.com/">http://developer.51cto.com/</A> 
  &nbsp;2009-06-29 18:26 &nbsp;nokiaguy &nbsp;<A 
  href="http://www.blogjava.net/nokiaguy/archive/2009/03/20/261020.html" 
  target=_blank>真的有外星人吗</A> &nbsp;<A 
  href="http://www.51cto.com/php/feedbackt.php?id=132354">我要评论(<SPAN 
  id=pinglun_1>0</SPAN>)</A></SPAN> </LI></UL></DIV></DIV>
<DIV class=BR_3></DIV>
<DIV class=container>
<DIV class=sum>
<UL 
  class=summary>本文介绍使用Synchronized关键字同步类方法。要达成Java多线程的run方法同步，需要在void和public之间加上synchronized关键字。</UL></DIV>
<UL class=con>
  <P>
  <P>要想解决“脏数据”的问题，最简单的方法就是使用synchronized关键字来使run方法同步，代码如下：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword>synchronized</SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword>void</SPAN><SPAN>&nbsp;run() &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</SPAN><LI><SPAN>}&nbsp;</SPAN></LI></OL></PRE>
  <P>从上面的代码可以看出，只要在void和public之间加上synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。即使当前线程执行到了run方法中的yield方法，也只是暂停了一下。由于其他线程无法执行run方法，因此，最终还是会由当前的线程来继续执行。先看看下面的代码：</P>
  <P>sychronized关键字只和一个对象实例绑定</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Test &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>} &nbsp;</SPAN><LI><SPAN>&nbsp; &nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Sync&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>implements</FONT></STRONG></SPAN><SPAN>&nbsp;Runnable &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>private</FONT></STRONG></SPAN><SPAN>&nbsp;Test&nbsp;test; &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;run() &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test.method(); &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;Sync(Test&nbsp;test) &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>this</FONT></STRONG></SPAN><SPAN>.test&nbsp;=&nbsp;test; &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;main(String[]&nbsp;args)&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>throws</FONT></STRONG></SPAN><SPAN>&nbsp;Exception &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test&nbsp;test1&nbsp;=&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Test(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test&nbsp;test2&nbsp;=&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Test(); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sync&nbsp;sync1&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Sync(test1); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sync&nbsp;sync2&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Sync(test2); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Thread(sync1).start(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Thread(sync2).start();&nbsp; &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;}&nbsp;</SPAN></LI></OL></PRE>
  <P>在Test类中的method方法是同步的。但上面的代码建立了两个Test类的实例，因此，test1和test2的method方法是分别执行的。要想让method同步，必须在建立Sync类的实例时向它的构造方法中传入同一个Test类的实例，如下面的代码所示：</P>
  <P>Sync sync1 = new Sync(test1);&nbsp;&nbsp;&nbsp;&nbsp; 
  不仅可以使用synchronized来同步非静态方法，也可以使用synchronized来同步静态方法。如可以按如下方式来定义method方法：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Test&nbsp; &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method()&nbsp;{&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN></SPAN><LI><SPAN>}&nbsp;</SPAN></LI></OL></PRE>
  <P>建立Test类的对象实例如下：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN>Test&nbsp;test&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Test();&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>对于静态方法来说，只要加上了synchronized关键字，这个方法就是同步的，无论是使用test.method()，还是使用Test.method()来调用method方法，method都是同步的，并不存在非静态方法的多个实例的问题。</P>
  <P>在23种设计模式中的单件（Singleton）模式如果按传统的方法设计，也是线程不安全的，下面的代码是一个线程不安全的单件模式。</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>package</FONT></STRONG></SPAN><SPAN>&nbsp;test; &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=comment><FONT color=#008200>//&nbsp;线程安全的Singleton模式 </FONT></SPAN><SPAN>&nbsp;</SPAN></SPAN><LI><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton &nbsp;</SPAN></SPAN><LI class=alt><SPAN>{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>private</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton&nbsp;sample; &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>private</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton() &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton&nbsp;getInstance() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>if</FONT></STRONG></SPAN><SPAN>&nbsp;(sample&nbsp;==&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>null</FONT></STRONG></SPAN><SPAN>) &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.yield();&nbsp;</SPAN><SPAN class=comment><FONT color=#008200>//&nbsp;为了放大Singleton模式的线程不安全性 </FONT></SPAN><SPAN>&nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sample&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>return</FONT></STRONG></SPAN><SPAN>&nbsp;sample; &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>} &nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;MyThread&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>extends</FONT></STRONG></SPAN><SPAN>&nbsp;Thread &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;run() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Singleton&nbsp;singleton&nbsp;=&nbsp;Singleton.getInstance(); &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(singleton.hashCode()); &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;main(String[]&nbsp;args) &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;threads[]&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Thread[</SPAN><SPAN class=number><FONT color=#c00000>5</FONT></SPAN><SPAN>]; &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>for</FONT></STRONG></SPAN><SPAN>&nbsp;(</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>int</FONT></STRONG></SPAN><SPAN>&nbsp;i&nbsp;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>0</FONT></SPAN><SPAN>;&nbsp;i&nbsp;&lt;&nbsp;threads.length;&nbsp;i++) &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threads[i]&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;MyThread(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>for</FONT></STRONG></SPAN><SPAN>&nbsp;(</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>int</FONT></STRONG></SPAN><SPAN>&nbsp;i&nbsp;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>0</FONT></SPAN><SPAN>;&nbsp;i&nbsp;&lt;&nbsp;threads.length;&nbsp;i++) &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threads[i].start(); &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>} &nbsp;</SPAN></LI></OL></PRE>
  <P>在上面的代码调用yield方法是为了使单件模式的线程不安全性表现出来，如果将这行去掉，上面的实现仍然是线程不安全的，只是出现的可能性小得多。</P>
  <P>程序的运行结果如下：</P>
  <P>25358555<BR>26399554<BR>7051261<BR>29855319<BR>5383406</P>
  <P>上面的运行结果可能在不同的运行环境上有所有同，但一般这五行输出不会完全相同。从这个输出结果可以看出，通过getInstance方法得到的对象实例是五个，而不是我们期望的一个。这是因为当一个线程执行了Thread.yield()后，就将CPU资源交给了另外一个线程。由于在线程之间切换时并未执行到创建Singleton对象实例的语句，因此，这几个线程都通过了if判断，所以，就会产生了建立五个对象实例的情况（可能创建的是四个或三个对象实例，这取决于有多少个线程在创建Singleton对象之前通过了if判断，每次运行时可能结果会不一样）。</P>
  <P>要想使上面的单件模式变成线程安全的，只要为getInstance加上synchronized关键字即可。代码如下：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;&nbsp;}&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>当然，还有更简单的方法，就是在定义Singleton变量时就建立Singleton对象，代码如下：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>private</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>final</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton&nbsp;sample&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Singleton();&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>然后在getInstance方法中直接将sample返回即可。这种方式虽然简单，但不知在getInstance方法中创建Singleton对象灵活。读者可以根据具体的需求选择使用不同的方法来实现单件模式。</P>
  <P>在使用synchronized关键字时有以下四点需要注意：</P>
  <P>1.&nbsp; synchronized关键字不能继承。</P>
  <P>虽然可以使用synchronized来定义方法，但synchronized并不属于方法定义的一部分，因此，synchronized关键字不能被继承。如果在父类中的某个方法使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上synchronized关键字才可以。当然，还可以在子类方法中调用父类中相应的方法，这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此，子类的方法也就相当于同步了。这两种方式的例子代码如下：</P>
  <P>在子类方法中加上synchronized关键字</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Parent &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method()&nbsp;{&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN></SPAN><LI><SPAN>} &nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Child&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>extends</FONT></STRONG></SPAN><SPAN>&nbsp;Parent &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method()&nbsp;{&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN></SPAN><LI><SPAN>}&nbsp;</SPAN></LI></OL></PRE>
  <P>在子类方法中调用父类的同步方法</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Parent &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method()&nbsp;{&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN></SPAN><LI><SPAN>} &nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;Child&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>extends</FONT></STRONG></SPAN><SPAN>&nbsp;Parent &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method()&nbsp;{&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>super</FONT></STRONG></SPAN><SPAN>.method();&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN></SPAN><LI><SPAN>}&nbsp;</SPAN></LI></OL></PRE>
  <P>2.&nbsp; 在定义接口方法时不能使用synchronized关键字。</P>
  <P>3.&nbsp; 构造方法不能使用synchronized关键字，但可以使用下节要讨论的synchronized块来进行同步。</P>
  <P>4.&nbsp; synchronized可以自由放置。</P>
  <P>在前面的例子中使用都是将synchronized关键字放在方法的返回类型前面。但这并不是synchronized可放置唯一位置。在非静态方法中，synchronized还可以放在方法定义的最前面，在静态方法中，synchronized可以放在static的前面，代码如下：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method(); &nbsp;</SPAN></SPAN><LI><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method(); &nbsp;</SPAN></SPAN><LI><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method(); &nbsp;</SPAN></SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method();&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>但要注意，synchronized不能放在方法返回类型的后面，如下面的代码是错误的：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;method(); &nbsp;</SPAN></SPAN><LI><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;method();&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>synchronized关键字只能用来同步方法，不能用来同步类变量，如下面的代码也是错误的。</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>int</FONT></STRONG></SPAN><SPAN>&nbsp;n&nbsp;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>0</FONT></SPAN><SPAN>; &nbsp;</SPAN></SPAN><LI><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>int</FONT></STRONG></SPAN><SPAN>&nbsp;n&nbsp;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>0</FONT></SPAN><SPAN>;&nbsp;</SPAN></SPAN></LI></OL></PRE>
  <P>虽然使用synchronized关键字同步方法是最安全的同步方式，但大量使用synchronized关键字会造成不必要的资源消耗以及性能损失。虽然从表面上看synchronized锁定的是一个方法，但实际上synchronized锁定的是一个类。也就是说，如果在非静态方法method1和method2定义时都使用了synchronized，在method1未执行完之前，method2是不能执行的。静态方法和非静态方法的情况类似。但静态和非静态方法不会互相影响。看看如下的代码：</P><PRE><OL class=dp-j><LI class=alt><SPAN><SPAN class=keyword><STRONG><FONT color=#006699>package</FONT></STRONG></SPAN><SPAN>&nbsp;test; &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;</SPAN><LI class=alt><SPAN></SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>class</FONT></STRONG></SPAN><SPAN>&nbsp;MyThread1&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>extends</FONT></STRONG></SPAN><SPAN>&nbsp;Thread &nbsp;</SPAN></SPAN><LI><SPAN>{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;String&nbsp;methodName; &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method(String&nbsp;s) &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s); &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>while</FONT></STRONG></SPAN><SPAN>&nbsp;(</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>true</FONT></STRONG></SPAN><SPAN>) &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;; &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method1() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method(</SPAN><SPAN class=string><FONT color=#0000ff>"非静态的method1方法"</FONT></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method2() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method(</SPAN><SPAN class=string><FONT color=#0000ff>"非静态的method2方法"</FONT></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method3() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method(</SPAN><SPAN class=string><FONT color=#0000ff>"静态的method3方法"</FONT></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>synchronized</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;method4() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method(</SPAN><SPAN class=string><FONT color=#0000ff>"静态的method4方法"</FONT></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;run() &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>try</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getClass().getMethod(methodName).invoke(</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>this</FONT></STRONG></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>catch</FONT></STRONG></SPAN><SPAN>&nbsp;(Exception&nbsp;e) &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>public</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>static</FONT></STRONG></SPAN><SPAN>&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>void</FONT></STRONG></SPAN><SPAN>&nbsp;main(String[]&nbsp;args)&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>throws</FONT></STRONG></SPAN><SPAN>&nbsp;Exception &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyThread1&nbsp;myThread1&nbsp;=&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;MyThread1(); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>for</FONT></STRONG></SPAN><SPAN>&nbsp;(</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>int</FONT></STRONG></SPAN><SPAN>&nbsp;i&nbsp;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>1</FONT></SPAN><SPAN>;&nbsp;i&nbsp;&lt;=&nbsp;</SPAN><SPAN class=number><FONT color=#c00000>4</FONT></SPAN><SPAN>;&nbsp;i++) &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread1.methodName&nbsp;=&nbsp;</SPAN><SPAN class=string><FONT color=#0000ff>"method"</FONT></SPAN><SPAN>&nbsp;+&nbsp;String.valueOf(i); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword><STRONG><FONT color=#006699>new</FONT></STRONG></SPAN><SPAN>&nbsp;Thread(myThread1).start(); &nbsp;</SPAN></SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sleep(</SPAN><SPAN class=number><FONT color=#c00000>100</FONT></SPAN><SPAN>); &nbsp;</SPAN></SPAN><LI class=alt><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;</SPAN><LI class=alt><SPAN>} &nbsp;</SPAN></LI></OL></PRE>
  <P>运行结果如下：</P>
  <P>非静态的method1方法<BR>静态的method3方法</P>
  <P>从上面的运行结果可以看出，method2和method4在method1和method3未结束之前不能运行。因此，我们可以得出一个结论，如果在类中使用synchronized关键字来定义非静态方法，那将影响这个中的所有使用synchronized关键字定义的非静态方法。如果定义的是静态方法，那么将影响类中所有使用synchronized关键字定义的静态方法。这有点象数据表中的表锁，当修改一条记录时，系统就将整个表都锁住了，因此，大量使用这种同步方式会使程序的性能大幅度下降。</P>
  <P><SPAN>【编辑推荐】</P>
  <OL>
    <LI><A href="http://developer.51cto.com/art/200906/132349.htm" 
    target=_blank>初学Java多线程：从线程返回数据的两种方法</A> 
    <LI><A href="http://developer.51cto.com/art/200906/132347.htm" 
    target=_blank>初学Java多线程：向线程传递数据的三种方法</A> 
    <LI><A href="http://developer.51cto.com/art/200906/132344.htm" 
    target=_blank>初学Java多线程：慎重使用volatile关键字</A> 
    <LI><A href="http://developer.51cto.com/art/200906/132343.htm" 
    target=_blank><FONT color=#0000ff>初学Java多线程：join方法的使用</FONT></A> 
    <LI><A href="http://developer.51cto.com/art/200906/132339.htm" 
    target=_blank><FONT color=#0000ff>初学Java多线程：线程的生命周期</FONT></A> 
  </SPAN></LI></OL>
  <DIV align=right>【责任编辑：<A class=ln href="mailto:yangsai@51cto.com">杨赛</A> 
  TEL：（010）68476606】</DIV><BR></UL>
<DIV class=BR_20></DIV>
<DIV class=zhus>
<DL>
  <DT>原文：<A 
  href="http://developer.51cto.com/art/200906/132354.htm">初学Java多线程：使用Synchronized关键字..</A> 
  </DT>
  <DD>标 签：&nbsp;&nbsp;<A 
  href="http://www.51cto.com/php/search.php?keyword=Java%B6%E0%CF%DF%B3%CC" 
  target=_blank>Java多线程</A>&nbsp;&nbsp;<A 
  href="http://www.51cto.com/php/search.php?keyword=Synchronized%B9%D8%BC%FC%D7%D6" 
  target=_blank>Synchronized关..</A>&nbsp;&nbsp;<A 
  href="http://www.51cto.com/php/search.php?keyword=%CD%AC%B2%BD%C0%E0" 
  target=_blank>..</A> </DD></DL></DIV>
<DIV class=lij><SPAN>上一篇： <A 
href="http://developer.51cto.com/art/200906/132349.htm" 
target=_self>初学Java多线程：从线程返回数据的两种方法</A> 下一篇： <A 
href="http://developer.51cto.com/art/200906/132360.htm" 
target=_self>初学Java多线程：使用Synchronized块同步方法</A></SPAN></DIV></DIV>
<DIV class=BR_8></DIV>
<DIV class=review>
<DIV class=tit>
<H3>网友评论</H3><SPAN><A 
href="http://www.51cto.com/php/feedbackt.php?id=132354">查看所有评论（<EM 
id=pinglun_2></EM>）</A></SPAN></DIV>
<DIV id=artcomments>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/artcomment0910.htm"></SCRIPT>
</DIV>
<DIV class=con1>
<DIV class=sp1>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/authart.htm"></SCRIPT>
</DIV>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/developer.htm"></SCRIPT>
</DIV></DIV>
<DIV class=BR_8></DIV>
<DIV class=mary>
<UL class=le1>
  <OL class=tit>读 书</OL>
  <LI><A title=Web编程技术 
  href="http://book.51cto.com/art/200906/127638.htm">Web编程技术</A> 
  <LI><A title=免费：商业的未来 
  href="http://book.51cto.com/art/200912/173475.htm">免费：商业的未来</A> 
  <LI><A title=软件调试实战 
  href="http://book.51cto.com/art/201001/180803.htm">软件调试实战</A> 
  <LI><A title=精通Hibernate：Java对象持久化技术详解 
  href="http://book.51cto.com/art/201001/178863.htm">精通Hibernate：Java对象持久化技术详解</A> 

  <LI><A title=完美代码 href="http://book.51cto.com/art/201003/190052.htm">完美代码</A> 
  </LI></UL>
<UL class=le2>
  <OL class=tit>论 坛</OL>
  <LI><A title=cisco高手请指点下：VLAN做网关怎么NAT出外网 
  href="http://bbs.51cto.com/thread-96269-1.html" 
  target=_blank>cisco高手请指点下：VLAN做网关怎么..</A>
  <LI><A title=卡吧威尔一用我的机子就蓝屏是怎么回事啊！ 
  href="http://bbs.51cto.com/thread-96203-1.html" 
  target=_blank>卡吧威尔一用我的机子就蓝屏是怎么..</A>
  <LI><A title=国内“最佳管理类网站”分类精选(7大类，20个) 
  href="http://bbs.51cto.com/thread-95860-1.html" 
  target=_blank>国内“最佳管理类网站”分类精选(7..</A>
  <LI><A title="端口汇聚 QoS" href="http://bbs.51cto.com/thread-94562-1.html" 
  target=_blank>端口汇聚 QoS</A>
  <LI><A title="中国计算机软件专业技术资格和水平考试 各地咨询地址和报名时间(2006-08-27更新）" 
  href="http://bbs.51cto.com/thread-94561-1.html" 
  target=_blank>中国计算机软件专业技术资格和水平..</A> </LI></UL>
<DIV class=BR_line></DIV>
<UL class=le1>
  <OL class=tit>博 客</OL>
  <LI><A title=微软windows2008官方教学视频 
  href="http://myshare.blog.51cto.com/734161/148722/" 
  target=_blank>微软windows2008官方教学视频</A>
  <LI><A title=139端口入侵简易教程 href="http://myshare.blog.51cto.com/734161/148721/" 
  target=_blank>139端口入侵简易教程</A>
  <LI><A title="WinAircrackPack 破解你邻居家的无线WIFI密码" 
  href="http://myshare.blog.51cto.com/734161/148720/" 
  target=_blank>WinAircrackPack 破解你邻居家的无..</A>
  <LI><A title=移动硬盘或U盘装系统 href="http://myshare.blog.51cto.com/734161/148719/" 
  target=_blank>移动硬盘或U盘装系统</A>
  <LI><A title=新手五步拿下网站后台. href="http://myshare.blog.51cto.com/734161/148718/" 
  target=_blank>新手五步拿下网站后台.</A> </LI></UL>
<UL class=le2>
  <OL class=tit>下 载</OL>
  <LI><A title=VLAN学习笔记大全 href="http://down.51cto.com/data/21695/" 
  target=_blank>VLAN学习笔记大全</A>
  <LI><A title=华为L2/L3交换机经典配置实例 href="http://down.51cto.com/data/21694/" 
  target=_blank>华为L2/L3交换机经典配置实例</A>
  <LI><A title=华为模拟器下载 href="http://down.51cto.com/data/21693/" 
  target=_blank>华为模拟器下载</A>
  <LI><A title="H3CNE 5.0中文教材PDF版" href="http://down.51cto.com/data/21692/" 
  target=_blank>H3CNE 5.0中文教材PDF版</A>
  <LI><A title=hcne2(内部认证真题) href="http://down.51cto.com/data/21691/" 
  target=_blank>hcne2(内部认证真题)</A> </LI></UL>
<DIV class=BR></DIV></DIV></DIV>
<DIV id=right>
<DIV class=hot>
<UL>
  <LI class=tit><EM>关注</EM> <A 
  href="http://developer.51cto.com/developer/qiyuan/">年终巨献：开发高手的物种起源</A> 
  <LI class=con>
  <DL>
    <DT><A href="http://developer.51cto.com/developer/qiyuan/"><IMG border=0 
    src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/095910688.jpg"></A> 
    </DT>
    <DD>究竟高手是如何炼成的？让我们一起回到原点，探寻开发高手的物种起源 </DD></DL></LI></UL></DIV>
<DIV 
style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; WIDTH: 300px; PADDING-RIGHT: 0px; HEIGHT: 1px; OVERFLOW: hidden; PADDING-TOP: 0px" 
id=MyMoveAd class=bann>
<SCRIPT language=JavaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/ad.js"></SCRIPT>
</DIV>
<DIV class=top10>
<DIV class=tab><A id=top_1 onmouseover=change_top10(1);>24小时</A><A id=top_2 
onmouseover=change_top10(2);>本周</A><A id=top_3 
onmouseover=change_top10(3);>本月</A></DIV>
<DIV style="DISPLAY: block" id=top10_1 class=list>
<UL>
  <LI><A title="Eclipse插件大全 挑选最牛的TOP30" 
  href="http://developer.51cto.com/art/201007/214478.htm" 
  target=_blank>Eclipse插件大全 挑选最牛的TOP30</A> </LI>
  <LI><A title="20个HTML 5和CSS3的免费网站模板与教程" 
  href="http://developer.51cto.com/art/201101/244001.htm" target=_blank>20个HTML 
  5和CSS3的免费网站模板与教程</A> </LI>
  <LI><A title="代替桌面工具 10款最给力的Web开发与设计工具" 
  href="http://developer.51cto.com/art/201101/242579.htm" target=_blank>代替桌面工具 
  10款最给力的Web开发与设计工具</A> </LI>
  <LI><A title=推荐25个非常优秀的网页表单设计案例 
  href="http://developer.51cto.com/art/201101/244023.htm" 
  target=_blank>推荐25个非常优秀的网页表单设计案例</A> </LI>
  <LI><A title="多图详解教程：Eclipse 3.6连接Tomcat 7" 
  href="http://developer.51cto.com/art/201007/212405.htm" 
  target=_blank>多图详解教程：Eclipse 3.6连接Tomcat 7</A> </LI>
  <LI><A title="程序员的十个层次 你属于哪一层？" 
  href="http://developer.51cto.com/art/201011/233083.htm" target=_blank>程序员的十个层次 
  你属于哪一层？</A> </LI>
  <LI><A title="Android抄袭Java代码出新证 谷歌新CEO如何应对？" 
  href="http://developer.51cto.com/art/201101/243835.htm" 
  target=_blank>Android抄袭Java代码出新证 谷歌新CEO如何应对？</A> </LI>
  <LI><A title=JavaScript初学者应注意的七个细节 
  href="http://developer.51cto.com/art/201101/242546.htm" 
  target=_blank>JavaScript初学者应注意的七个细节</A> </LI>
  <LI><A title=2011年1月编程语言排行榜：Python称霸2010 
  href="http://developer.51cto.com/art/201101/242327.htm" 
  target=_blank>2011年1月编程语言排行榜：Python称霸2010</A> </LI>
  <LI><A title=Google首席Java架构师谈数学与程序员的关系 
  href="http://developer.51cto.com/art/201012/238798.htm" 
  target=_blank>Google首席Java架构师谈数学与程序员的关系</A> </LI></UL></DIV>
<DIV style="DISPLAY: none" id=top10_2 class=list>
<UL>
  <LI><A title="Android抄袭Java代码出新证 谷歌新CEO如何应对？" 
  href="http://developer.51cto.com/art/201101/243835.htm" 
  target=_blank>Android抄袭Java代码出新证 谷歌新CEO如何应对？</A> </LI>
  <LI><A title="HTML效仿Chrome浏览器 将不再有版本号" 
  href="http://developer.51cto.com/art/201101/243813.htm" 
  target=_blank>HTML效仿Chrome浏览器 将不再有版本号</A> </LI>
  <LI><A title=10款给力构建易用性网站的jQuery插件 
  href="http://developer.51cto.com/art/201101/243852.htm" 
  target=_blank>10款给力构建易用性网站的jQuery插件</A> </LI>
  <LI><A title="HTML5迎来新Logo 成下一代Web标准无容置疑" 
  href="http://developer.51cto.com/art/201101/243420.htm" 
  target=_blank>HTML5迎来新Logo 成下一代Web标准无容置疑</A> </LI>
  <LI><A title=9大最有潜力PHP开源项目:Android开发居首 
  href="http://developer.51cto.com/art/201101/243552.htm" 
  target=_blank>9大最有潜力PHP开源项目:Android开发居首</A> </LI>
  <LI><A title=jQuery1.5的六大细节改进:DOM操作更简单 
  href="http://developer.51cto.com/art/201101/243424.htm" 
  target=_blank>jQuery1.5的六大细节改进:DOM操作更简单</A> </LI>
  <LI><A title=是什么让一个Web应用程序变得如此伟大？ 
  href="http://developer.51cto.com/art/201101/243540.htm" 
  target=_blank>是什么让一个Web应用程序变得如此伟大？</A> </LI>
  <LI><A title="ASP.NET MVC 3中文正式版发布（附下载）" 
  href="http://developer.51cto.com/art/201101/243705.htm" target=_blank>ASP.NET 
  MVC 3中文正式版发布（附下载）</A> </LI>
  <LI><A title="10个超赞超实用的免费jQuery图片插件 附下载" 
  href="http://developer.51cto.com/art/201101/243701.htm" 
  target=_blank>10个超赞超实用的免费jQuery图片插件 附下载</A> </LI>
  <LI><A title=2011年5大科技预言：平板电脑昙花一现 
  href="http://developer.51cto.com/art/201101/243698.htm" 
  target=_blank>2011年5大科技预言：平板电脑昙花一现</A> </LI></UL></DIV>
<DIV style="DISPLAY: none" id=top10_3 class=list>
<UL>
  <LI><A title=2011年1月编程语言排行榜：Python称霸2010 
  href="http://developer.51cto.com/art/201101/242327.htm" 
  target=_blank>2011年1月编程语言排行榜：Python称霸2010</A> </LI>
  <LI><A title="代替桌面工具 10款最给力的Web开发与设计工具" 
  href="http://developer.51cto.com/art/201101/242579.htm" target=_blank>代替桌面工具 
  10款最给力的Web开发与设计工具</A> </LI>
  <LI><A title=15个国外最流行的CSS框架（附下载） 
  href="http://developer.51cto.com/art/201101/241626.htm" 
  target=_blank>15个国外最流行的CSS框架（附下载）</A> </LI>
  <LI><A title="Android抄袭Java代码出新证 谷歌新CEO如何应对？" 
  href="http://developer.51cto.com/art/201101/243835.htm" 
  target=_blank>Android抄袭Java代码出新证 谷歌新CEO如何应对？</A> </LI>
  <LI><A title=3种类型的程序员：“虫族”，“人族”，“神族” 
  href="http://developer.51cto.com/art/201012/240844.htm" 
  target=_blank>3种类型的程序员：“虫族”，“人族”，“神族”</A> </LI>
  <LI><A title=JavaScript初学者应注意的七个细节 
  href="http://developer.51cto.com/art/201101/242546.htm" 
  target=_blank>JavaScript初学者应注意的七个细节</A> </LI>
  <LI><A title="10个国外开发的HTML 5精彩应用" 
  href="http://developer.51cto.com/art/201012/240884.htm" 
  target=_blank>10个国外开发的HTML 5精彩应用</A> </LI>
  <LI><A title=年度最热门SNS开源系统出炉（附下载） 
  href="http://developer.51cto.com/art/201012/240705.htm" 
  target=_blank>年度最热门SNS开源系统出炉（附下载）</A> </LI>
  <LI><A title=2011年Web设计最新潮流（图文） 
  href="http://developer.51cto.com/art/201101/242117.htm" 
  target=_blank>2011年Web设计最新潮流（图文）</A> </LI>
  <LI><A title=Java专家孙卫琴：专精一门编程语言也能成功 
  href="http://developer.51cto.com/art/201101/243013.htm" 
  target=_blank>Java专家孙卫琴：专精一门编程语言也能成功</A> </LI></UL></DIV></DIV>
<DIV class=BR_10></DIV>
<DIV class=tag>
<DIV class=con><A title=刀片服务器专区 href="http://server.51cto.com/Blade" 
target=_blank>刀片服务器</A>&nbsp;&nbsp; <A title=云计算频道全新上线 
href="http://cloud.51cto.com/" target=_blank>云计算</A>&nbsp;&nbsp; <A 
title=ARP攻击与防御 href="http://netsecurity.51cto.com/art/200609/31897.htm" 
target=_blank>ARP攻防</A>&nbsp;&nbsp; <A title=思科培训技术专区 
href="http://training.51cto.com/cisco" 
target=_blank>思科培训</A>&nbsp;&nbsp;</DIV></DIV>
<DIV class=BR_10></DIV>
<DIV class=dingy>
<TABLE border=0 cellSpacing=0 cellPadding=0 width=280>
  <TBODY>
  <TR>
    <TD height=56 colSpan=2>&nbsp;</TD></TR>
  <TR>
    <TD colSpan=2 align=right><A 
      href="http://news.51cto.com/col/1323/">点击这里查看样刊</A></TD></TR>
  <TR>
    <TD colSpan=2>&nbsp;</TD></TR>
  <TR>
    <FORM onsubmit="return mail_process(email.value)" method=post 
    action=http://newsletter2.51cto.com/new/newsletter/mailm.php>
    <TD width=223 align=right><INPUT class=new_te5 onfocus=this.select() 
      onclick="this.value=''" name=email><INPUT type=hidden name=mailsub></TD>
    <TD width=57 align=right><INPUT onclick=submit(); 
      src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/dingy.gif" 
      type=image></TD></FORM></TR></TBODY></TABLE></DIV>
<DIV class=BR_10></DIV>
<DIV class=redian>
<DIV class=list>
<UL>
  <LI><A title="PHP+JavaScript 实现动态显示服务器端运行进度条(酷)" 
  href="http://developer.51cto.com/art/200508/1636.htm">PHP+JavaScript 
  实现动态显示服务器端运行..</A> </LI>
  <LI><A title="用 Visual C++ 优化代码" 
  href="http://developer.51cto.com/art/200508/1343.htm">用 Visual C++ 优化代码</A> 
  </LI>
  <LI><A title=六类布线系统需注意的问题 
  href="http://network.51cto.com/art/200508/1191.htm">六类布线系统需注意的问题</A> </LI>
  <LI><A title=惠普Unix系统中发现多个易受攻击漏洞 
  href="http://netsecurity.51cto.com/art/200508/1052.htm">惠普Unix系统中发现多个易受攻击漏洞</A> 
  </LI>
  <LI><A title="6日病毒日报 后门黑客程序利用网络共享传播" 
  href="http://netsecurity.51cto.com/art/200706/48824.htm">6日病毒日报 
  后门黑客程序利用网络共享传播</A> </LI>
  <LI><A title=例数各大智能手机操作系统 
  href="http://os.51cto.com/art/200802/65828.htm">例数各大智能手机操作系统</A> </LI>
  <LI><A title="5月第3周安全回顾 思科路由器Rootkit现身 企业需漏洞管理" 
  href="http://netsecurity.51cto.com/art/200805/74112.htm">5月第3周安全回顾 
  思科路由器Rootkit现身 ..</A> </LI>
  <LI><A title=cookie到底是有害还是有益？ 
  href="http://netsecurity.51cto.com/art/200508/1564.htm">cookie到底是有害还是有益？</A> 
  </LI>
  <LI><A title=2009年电子发现之趋势分析 
  href="http://stor.51cto.com/art/200901/105981.htm">2009年电子发现之趋势分析</A> </LI>
  <LI><A title=CDN采用的关键技术 
  href="http://sysapp.51cto.com/art/200508/473.htm">CDN采用的关键技术</A> 
</LI></UL></DIV></DIV>
<DIV class=BR_10></DIV><IFRAME 
style="PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #dbdbdb; MARGIN: 0px; PADDING-LEFT: 0px; WIDTH: 300px; PADDING-RIGHT: 0px; HEIGHT: 250px; OVERFLOW: hidden; PADDING-TOP: 0px" 
class=bann src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/4.htm" 
frameBorder=0 scrolling=no></IFRAME>
<DIV class=BR_10></DIV></DIV>
<DIV class=BR></DIV></DIV>
<DIV class=BR_20></DIV>
<DIV id=foot>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/copy_right.js"></SCRIPT>
</DIV><!--弹出窗口-->
<DIV style="BACKGROUND-COLOR: #fff; DISPLAY: none; TOP: 0px; LEFT: 0px" id=tanc>
<DIV class=tit>
<DL>
  <DT>更多关于“<SPAN id=search_title></SPAN>”的推荐</DT>
  <DD><IMG onclick=close_this(); 
  src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/ico2.gif"></DD></DL></DIV>
<DIV class=con>
<OL>51CTO还有以下内容可能满足您的需求</OL>
<UL id=search_body></UL><SPAN><A id=search_url 
href="http://developer.51cto.com/art/200906/132354.htm#">站内搜索更多 <EM 
id=search_foot></EM>的内容</A></SPAN></DIV></DIV><!--弹出窗口End--><!-- 新监测代码 -->
<SCRIPT type=text/javascript>
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT>

<SCRIPT type=text/javascript>
try {
var pageTracker = _gat._getTracker("UA-10766765-6");
pageTracker._trackPageview();
} catch(err) {}</SCRIPT>

<DIV style="DISPLAY: none">
<SCRIPT type=text/javascript>
var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3F6d49a084fadc0a02616d836ba8b4a72e' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT>

<SCRIPT type=text/javascript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/tongji.js"></SCRIPT>
<NOSCRIPT><A href="http://www.linezing.com/"><IMG 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/tongji.gif"></A></NOSCRIPT> 
</DIV><!-- 新监测代码 -->
<DIV style="DISPLAY: none"><SPAN id=wordlink_1>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/wordlink1.js"></SCRIPT>
</SPAN><SPAN id=wordlink_2>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/wordlink2.js"></SCRIPT>
</SPAN><SPAN id=wordlink_3>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/wordlink3.js"></SCRIPT>
</SPAN><SPAN id=wordlink_4>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/wordlink4.js"></SCRIPT>
</SPAN><SPAN id=pinglun>
<SCRIPT language=JavaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/getArtCount.htm"></SCRIPT>
</SPAN>
<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/ad(1).js"></SCRIPT>
<SPAN id=tonglan>
<SCRIPT language=JavaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/ad(2).js"></SCRIPT>
</SPAN><SPAN id=wordlink>
<SCRIPT language=JavaScript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/ad(1).js"></SCRIPT>
</SPAN></DIV>
<SCRIPT>
	document.getElementById('pinglun_1').innerHTML = document.getElementById("pinglun").innerHTML;
	document.getElementById('pinglun_2').innerHTML = document.getElementById("pinglun").innerHTML;
	document.getElementById('tonglanad').innerHTML=document.getElementById('tonglan').innerHTML;
    document.getElementById('tonglan').innerHTML="";
	function refimg(){
		var randval = Math.random();
		document.getElementById('secunum').src='http://www.51cto.com/php/seccode.php?rnum='+randval;
	}
</SCRIPT>

<SCRIPT 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/count.js"></SCRIPT>

<SCRIPT language=javascript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/count.htm"></SCRIPT>

<SCRIPT type=text/javascript 
src="初学Java多线程：使用Synchronized关键字同步类方法%20-%2051CTO_COM_files/new_art_dev.js"></SCRIPT>
</BODY></HTML>
